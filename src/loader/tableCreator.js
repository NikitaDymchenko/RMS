import { clickhouseReplicaClient, getMongoClient } from '../config/config.js';
import { createClient } from '@clickhouse/client';
import { tablesConfig } from '../config/tables.js';
import { logInfo, logError, logDebug } from '../utils/logging.js';

function getSourceClient(host, secure, user, pass) {
  const protocol = secure === 'true' ? 'https' : 'http';
  const url = `${protocol}://${host}`;
  logDebug(`[tableCreator] Connecting to source CH: ${url} as ${user}`);
  return createClient({ url, username: user, password: pass });
}

export async function createTables() {
  logInfo('â€” createTables() start');
  for (const tbl of tablesConfig) {
    logDebug(`Checking config for '${tbl.name}': enabled=${tbl.enabled}, source=${tbl.source}`);
    if (!tbl.enabled) {
      logInfo(`ðŸ›‘ Skipping '${tbl.name}' (disabled)`);
      continue;
    }

    let ddl;
    if (tbl.source === 'mongo') {
      logInfo(`ðŸ”§ Generating DDL for Mongo collection ${tbl.sourceTable}`);
      const client = getMongoClient();
      await client.connect();
      const sample = await client.db(process.env.MONGO_DB)
        .collection(tbl.sourceTable)
        .findOne({});
      await client.close();

      const cols = Object.entries(sample)
        .map(([k, v]) => `  ${k} ${typeof v} /* ${v} */`)
        .join(',\n');
      ddl = `CREATE TABLE IF NOT EXISTS ${tbl.targetSchema}.${tbl.sourceTable} (\n`
          + cols + '\n)'
          + ' ENGINE = MergeTree ORDER BY (_id)';
    }
    else {
      logInfo(`ðŸ”§ Generating DDL for ClickHouse table ${tbl.sourceTable}`);
      if (tbl.autoGenerateDDL) {
        const src = getSourceClient(
          tbl.sourceDatabase,
          process.env.REPLICA_CH_SECURE,
          process.env.LIVEDIGITAL_CH_USER,
          process.env.LIVEDIGITAL_CH_PASSWORD
        );
        const q = `
          SELECT name, type 
            FROM system.columns 
           WHERE database='${tbl.sourceSchema}' 
             AND table='${tbl.sourceTable}'
           ORDER BY position
        `;
        logDebug(`[tableCreator] Metadata query: ${q.trim()}`);
        const r = await src.query({ query: q, format: 'JSON' });
        const { data } = await r.json();
        await src.close();

        const cols = data
          .map(c => `  ${c.name} ${c.type}`)
          .join(',\n');
        const base = `${tbl.prefix}${tbl.sourceTable}`;
        const qual = `${tbl.targetSchema}.${base}`;
        ddl = `CREATE TABLE IF NOT EXISTS ${qual} (\n`
            + cols + '\n)'
            + ' ENGINE = MergeTree\n'
            + 'PARTITION BY toYYYYMM(timestamp)\n'
            + `ORDER BY (${data[0].name})`;
      } else {
        logInfo(`Using static DDL for ${tbl.sourceTable}`);
        const base = `${tbl.prefix}${tbl.sourceTable}`;
        const qual = `${tbl.targetSchema}.${base}`;
        ddl = tbl.ddl.replace(
          /CREATE TABLE IF NOT EXISTS.*\(/,
          `CREATE TABLE IF NOT EXISTS ${qual} (`
        );
      }
    }

    logInfo(`ðŸ“‹ Executing DDL for '${tbl.name}':\n${ddl}`);
    try {
      await clickhouseReplicaClient.query({ query: ddl });
      logInfo(`âœ… Table '${tbl.name}' ready`);
    } catch (err) {
      logError(`Failed to create '${tbl.name}'`, err);
      throw err;
    }
  }
  logInfo('â€” createTables() done');
}
