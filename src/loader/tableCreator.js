// src/loader/tableCreator.js
import { clickhouseReplicaClient, getMongoClient } from '../config/config.js';
import { createClient } from '@clickhouse/client';
import { tablesConfig } from '../config/tables.js';
import { logInfo, logError } from '../utils/logging.js';

/**
 * –°–æ–∑–¥–∞—ë—Ç ClickHouse‚Äì–∫–ª–∏–µ–Ω—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ
 */
function getSourceClient(host, secure, user, pass) {
  const protocol = secure === 'true' ? 'https' : 'http';
  const url = `${protocol}://${host}`;
  return createClient({ url, username: user, password: pass });
}

export async function createTables() {
  for (const tbl of tablesConfig) {
    if (!tbl.enabled) {
      logInfo(`üõë Skipping '${tbl.name}' (disabled)`);
      continue;
    }

    let ddl;  // —É–±—Ä–∞–ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–∏–ø–∞

    if (tbl.source === 'mongo') {
      // ... –∑–¥–µ—Å—å –≤–∞—à –∫–æ–¥ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DDL –ø–æ Mongo (–∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
    }
    else { // tbl.source === 'clickhouse'
      if (tbl.autoGenerateDDL) {
        // 1) –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–æ–¥–æ–≤–æ–π ClickHouse
        const srcClient = getSourceClient(
          tbl.sourceDatabase,
          process.env.REPLICA_CH_SECURE,
          process.env.LIVEDIGITAL_CH_USER,
          process.env.LIVEDIGITAL_CH_PASSWORD
        );

        // 2) –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫
        const query = `
          SELECT name, type
            FROM system.columns
           WHERE database = '${tbl.sourceSchema}'
             AND table = '${tbl.sourceTable}'
           ORDER BY position
        `;
        const result = await srcClient.query({ query, format: 'JSON' });
        const { data } = await result.json();

        // 3) —Å—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        const cols = data.map(col => `  ${col.name} ${col.type}`).join(',\n');

        // 4) –≥–µ–Ω–µ—Ä–∏–º DDL –≤ —Ü–µ–ª–µ–≤–æ–π —Å—Ö–µ–º–µ
        const baseName = `${tbl.prefix ? tbl.prefix + '_' : ''}${tbl.sourceTable}`;
        const qualified = `${tbl.targetSchema}.${baseName}`;
        ddl = 
          `CREATE TABLE IF NOT EXISTS ${qualified} (\n` +
          cols + '\n)' +
          ` ENGINE = MergeTree\n` +
          `PARTITION BY toYYYYMM(timestamp)\n` +
          `ORDER BY (toDate(timestamp), ${data[0].name})`;  // –¥–µ–ª–∞–µ–º ORDER BY –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ

        await srcClient.close();
      }
      else {
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π ddl –∏–∑ config/tables.js
        const prefix = process.env.TABLE_PREFIX || '';
        const base = `${prefix}_${tbl.sourceTable}`;
        const qualified = `${tbl.targetSchema}.${base}`;
        ddl = tbl.ddl.replace(
          /CREATE TABLE IF NOT EXISTS \${prefix}_\${sourceTable}/,
          `CREATE TABLE IF NOT EXISTS ${qualified}`
        );
      }
    }

    // –∑–∞–ø—É—Å–∫–∞–µ–º DDL –≤ —Ä–µ–ø–ª–∏–∫–µ
    logInfo(`üî® Creating table '${tbl.name}'`);
    try {
      await clickhouseReplicaClient.query({ query: ddl });
      logInfo(`‚úÖ Table '${tbl.name}' ready`);
    } catch (err) {
      logError(`Failed to create '${tbl.name}'`, err);
      throw err;
    }
  }
}
